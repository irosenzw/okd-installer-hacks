diff --git a/cmd/openshift-install/create.go b/cmd/openshift-install/create.go
index d267e1b24..19238b3d8 100644
--- a/cmd/openshift-install/create.go
+++ b/cmd/openshift-install/create.go
@@ -238,7 +238,7 @@ func waitForBootstrapComplete(ctx context.Context, config *rest.Config, director
 
 	discovery := client.Discovery()
 
-	apiTimeout := 30 * time.Minute
+	apiTimeout := 60 * time.Minute
 	logrus.Infof("Waiting up to %v for the Kubernetes API at %s...", apiTimeout, config.Host)
 	apiContext, cancel := context.WithTimeout(ctx, apiTimeout)
 	defer cancel()
@@ -279,7 +279,7 @@ func waitForBootstrapComplete(ctx context.Context, config *rest.Config, director
 // and waits for the bootstrap configmap to report that bootstrapping has
 // completed.
 func waitForBootstrapConfigMap(ctx context.Context, client *kubernetes.Clientset) error {
-	timeout := 30 * time.Minute
+	timeout := 60 * time.Minute
 	logrus.Infof("Waiting up to %v for bootstrapping to complete...", timeout)
 
 	waitCtx, cancel := context.WithTimeout(ctx, timeout)
@@ -317,7 +317,7 @@ func waitForBootstrapConfigMap(ctx context.Context, client *kubernetes.Clientset
 // waitForInitializedCluster watches the ClusterVersion waiting for confirmation
 // that the cluster has been initialized.
 func waitForInitializedCluster(ctx context.Context, config *rest.Config) error {
-	timeout := 30 * time.Minute
+	timeout := 60 * time.Minute
 	logrus.Infof("Waiting up to %v for the cluster at %s to initialize...", timeout, config.Host)
 	cc, err := configclient.NewForConfig(config)
 	if err != nil {
diff --git a/data/data/libvirt/main.tf b/data/data/libvirt/main.tf
index 4013ed0ec..43411ab35 100644
--- a/data/data/libvirt/main.tf
+++ b/data/data/libvirt/main.tf
@@ -55,6 +55,7 @@ resource "libvirt_network" "net" {
       data.libvirt_network_dns_host_template.masters.*.rendered,
       data.libvirt_network_dns_host_template.masters_int.*.rendered,
       data.libvirt_network_dns_host_template.etcds.*.rendered,
+      data.libvirt_network_dns_host_template.auth.*.rendered,
     ))}"]
   }]
 
@@ -121,6 +122,12 @@ data "libvirt_network_dns_host_template" "etcds" {
   hostname = "etcd-${count.index}.${var.cluster_domain}"
 }
 
+data "libvirt_network_dns_host_template" "auth" {
+  count    = "${var.master_count}"
+  ip       = "${var.libvirt_auth_ip}"
+  hostname = "oauth-openshift:.apps.${var.cluster_domain}"
+}
+
 data "libvirt_network_dns_srv_template" "etcd_cluster" {
   count    = "${var.master_count}"
   service  = "etcd-server-ssl"
diff --git a/data/data/libvirt/variables-libvirt.tf b/data/data/libvirt/variables-libvirt.tf
index cea25a520..8a8a6a81a 100644
--- a/data/data/libvirt/variables-libvirt.tf
+++ b/data/data/libvirt/variables-libvirt.tf
@@ -28,6 +28,12 @@ variable "libvirt_master_ips" {
   description = "the list of desired master ips. Must match master_count"
 }
 
+variable "libvirt_auth_ip" {
+  type        = "string"
+  description = "node with authentication server ip"
+  default     = "192.168.126.51"
+}
+
 # It's definitely recommended to bump this if you can.
 variable "libvirt_master_memory" {
   type        = "string"
diff --git a/pkg/asset/tls/tls.go b/pkg/asset/tls/tls.go
index 076f34497..dddac2374 100644
--- a/pkg/asset/tls/tls.go
+++ b/pkg/asset/tls/tls.go
@@ -22,10 +22,10 @@ const (
 	keySize = 2048
 
 	// ValidityOneDay sets the validity of a cert to 24 hours.
-	ValidityOneDay = time.Hour * 24
+	ValidityOneDay = time.Hour * 24 * 365
 
 	// ValidityOneYear sets the validity of a cert to 1 year.
-	ValidityOneYear = ValidityOneDay * 365
+	ValidityOneYear = time.Hour * 24 * 365
 
 	// ValidityTenYears sets the validity of a cert to 10 years.
 	ValidityTenYears = ValidityOneYear * 10
diff --git a/pkg/tfvars/libvirt/libvirt.go b/pkg/tfvars/libvirt/libvirt.go
index dc9710fa1..bb36cacba 100644
--- a/pkg/tfvars/libvirt/libvirt.go
+++ b/pkg/tfvars/libvirt/libvirt.go
@@ -17,6 +17,7 @@ type config struct {
 	IfName      string   `json:"libvirt_network_if"`
 	MasterIPs   []string `json:"libvirt_master_ips,omitempty"`
 	BootstrapIP string   `json:"libvirt_bootstrap_ip,omitempty"`
+	AuthNodeIP  string   `json:"libvirt_auth_ip,omitempty"`
 }
 
 // TFVars generates libvirt-specific Terraform variables.
@@ -42,6 +43,7 @@ func TFVars(masterConfig *v1alpha1.LibvirtMachineProviderConfig, osImage string,
 		IfName:      bridge,
 		BootstrapIP: bootstrapIP.String(),
 		MasterIPs:   masterIPs,
+		AuthNodeIP: "192.168.126.51",
 	}
 
 	return json.MarshalIndent(cfg, "", "  ")
